<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
  </configSections>

  <akka>
    <hocon>
      <![CDATA[
          akka {
            actor {
              deployment {
                /account_coordinator {
                  router = consistent-hashing-pool
                  nr-of-instances = 100
                  virtual-nodes-factor = 10
                }
                /domestic_transfer_recipient {
                  router = round-robin-pool
                  resizer {
                    enabled = on
                    lower-bound = 1
                    upper-bound = 10
                    messages-per-resize = 10
                  }
                }
              }
            }
            persistence {
              journal {
                plugin = "akka.persistence.journal.mongodb"
                mongodb {
                  event-adapters {
                    v1 = "Serialization+AkkaPersistenceEventAdapter, AkkaIntegrated"
                  }
                  event-adapter-bindings {
                    "BankTypes+AccountMessage, AkkaIntegrated" = [v1]
                  }

                  # qualified type name of the MongoDb persistence journal actor
                  class = "Akka.Persistence.MongoDb.Journal.MongoDbJournal, Akka.Persistence.MongoDb"

                  # connection string used for database access
                  connection-string = "mongodb://localhost:27017/bank"

                  # transaction
                  use-write-transaction = off

                  # should corresponding journal table's indexes be initialized automatically
                  auto-initialize = on

                  # dispatcher used to drive journal actor
                  plugin-dispatcher = "akka.actor.default-dispatcher"

                  # MongoDb collection corresponding with persistent journal
                  collection = "AccountEventJournal"

                  # metadata collection
                  metadata-collection = "Metadata"

                  # For users with legacy data, who want to keep writing data to MongoDb using the original BSON format
                  # and not the standard binary format introduced in v1.4.0 (see https://github.com/akkadotnet/Akka.Persistence.MongoDB/issues/72)
                  # enable this setting via `legacy-serialization = on`.
                  #
                  # NOTE: this will likely break features such as Akka.Cluster.Sharding, IActorRef serialization, AtLeastOnceDelivery, and more.
                  legacy-serialization = off

                  # Per-call timeout setting - Journal will err on the side of caution and fail calls that take longer than this
                  # to complete. This is to prevent the journal from blocking indefinitely if the database is slow or unresponsive.
                  # If you experience frequent failures due to timeouts, you may want to increase this value.
                  # Default: 10 seconds
                  call-timeout = 10s
                }
              }

              snapshot-store {
                plugin = "akka.persistence.snapshot-store.mongodb"
                mongodb {
                  # qualified type name of the MongoDB persistence snapshot actor
                  class = "Akka.Persistence.MongoDb.Snapshot.MongoDbSnapshotStore, Akka.Persistence.MongoDb"

                  # connection string used for database access
                  connection-string = "mongodb://localhost:27017/bank"

                  # transaction
                  use-write-transaction = off

                  # should corresponding snapshot's indexes be initialized automatically
                  auto-initialize = on

                  # dispatcher used to drive snapshot storage actor
                  plugin-dispatcher = "akka.actor.default-dispatcher"

                  # MongoDb collection corresponding with persistent snapshot store
                  collection = "AccountSnapshotStore"

                  # For users with legacy data, who want to keep writing data to MongoDb using the original BSON format
                  # and not the standard binary format introduced in v1.4.0 (see https://github.com/akkadotnet/Akka.Persistence.MongoDB/issues/72)
                  # enable this setting via `legacy-serialization = on`.
                  #
                  # NOTE: this will likely break features such as Akka.Cluster.Sharding, IActorRef serialization, AtLeastOnceDelivery, and more.
                  legacy-serialization = off

                  # Per-call timeout setting - Journal will err on the side of caution and fail calls that take longer than this
                  # to complete. This is to prevent the journal from blocking indefinitely if the database is slow or unresponsive.
                  # If you experience frequent failures due to timeouts, you may want to increase this value.
                  # Default: 10 seconds
                  call-timeout = 10s
                }
              }

              query {
                mongodb {
                  # Implementation class of the EventStore ReadJournalProvider
                  class = "Akka.Persistence.MongoDb.Query.MongoDbReadJournalProvider, Akka.Persistence.MongoDb"

                  # Absolute path to the write journal plugin configuration entry that this
                  # query journal will connect to.
                  # If undefined (or "") it will connect to the default journal as specified by the
                  # akka.persistence.journal.plugin property.
                  write-plugin = ""

                  # The SQL write journal is notifying the query side as soon as things
                  # are persisted, but for efficiency reasons the query side retrieves the events
                  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
                  refresh-interval = 3s

                  # How many events to fetch in one query (replay) and keep buffered until they
                  # are delivered downstreams.
                  max-buffer-size = 500
                }
              }
            }
          }
      ]]>
    </hocon>
  </akka>
</configuration>
