<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
  </configSections>

  <akka>
    <hocon>
      <![CDATA[
          akka {
            actor {
              provider = cluster
              deployment {
                /domestic_transfer_recipient {
                  router = round-robin-pool
                  resizer {
                    enabled = on
                    lower-bound = 1
                    upper-bound = 10
                    messages-per-resize = 10
                  }
                }
              }

              serializers {
                json = "Akka.Serialization.NewtonSoftJsonSerializer"
                accountevent = "Serialization+AccountEventSerializer, AkkaIntegrated"
                accountsnapshot = "Serialization+AccountSnapshotSerializer, AkkaIntegrated"
              }
              serialization-bindings {
                "System.String" = json
                "System.Object" = json
                "BankTypes+AccountMessage, AkkaIntegrated" = accountevent
                "BankTypes+AccountState, AkkaIntegrated" = accountsnapshot
              }
            }
            remote {
              dot-netty.tcp {
                hostname = "localhost"
                port = 8081
              }
            }
            cluster {
              seed-nodes = ["akka.tcp://bank@localhost:8081/"]
              sharding {
                remember-entities = true
                state-store-mode = ddata
                remember-entities-store = eventsourced
              }
            }
            persistence {
              journal {
                plugin = "akka.persistence.journal.sql"
                sql {
                  event-adapters {
                    v1 = "Serialization+AkkaPersistenceEventAdapter, AkkaIntegrated"
                  }
                  event-adapter-bindings {
                    "BankTypes+AccountMessage, AkkaIntegrated" = [v1]
                  }

			            class = "Akka.Persistence.Sql.Journal.SqlWriteJournal, Akka.Persistence.Sql"

                  # connection string used for database access
                  connection-string = "Server=localhost;Database=postgres;Uid=postgres;Pwd=password"

                  provider-name = "PostgreSQL.15"

                  # should corresponding journal table's indexes be initialized automatically
                  auto-initialize = on

                  default {
                    # If you want to specify a schema for your tables, you can do so here.
                    schema-name = null

                    journal {
                      use-writer-uuid-column = true

                      table-name = "akka_event_journal"
                      columns {
                        ordering = ordering
                        deleted = deleted
                        persistence-id = persistence_id
                        sequence-number = sequence_number
                        created = created
                        tags = tags
                        message = message
                        identifier = identifier
                        manifest = manifest
                        writer-uuid = writer_uuid
                      }
                    }

                    metadata {
                      table-name = "akka_metadata"
                      columns {
                        persistence-id = persistence_id
                        sequence-number = sequence_number
                      }
                    }

                    tag {
                      table-name = "akka_tags"
                      columns {
                        ordering-id = ordering_id
                        tag-value = tag
                        persistence-id = persistence_id
                        sequence-nr = sequence_nr
                      }
                    }
                  }
                }
                sharding {
			            class = "Akka.Persistence.Sql.Journal.SqlWriteJournal, Akka.Persistence.Sql"

                  connection-string = "Server=localhost;Database=postgres;Uid=postgres;Pwd=password"
                }
              }

              snapshot-store {
                plugin = "akka.persistence.snapshot-store.sql"
                sql {
                  class = "Akka.Persistence.Sql.Snapshot.SqlSnapshotStore, Akka.Persistence.Sql"

                  connection-string = "Server=localhost;Database=postgres;Uid=postgres;Pwd=password"

                  provider-name = "PostgreSQL.15"

                  table-name = "akka_snapshots"

                  auto-initialize = on

                  default {
                    schema-name = null
                    snapshot {
                      table-name = "akka_snapshots"
                      columns {
                        persistence-id = persistence_id
                        sequence-number = sequence_number
                        created = created
                        snapshot = snapshot
                        manifest = manifest
                        serializerId = serializer_id
                      }
                    }
                  }
                }
              }

              query {
                sql {
                  class = "Akka.Persistence.Sql.Query.SqlReadJournalProvider, Akka.Persistence.Sql"

                  connection-string = "Server=localhost;Database=postgres;Uid=postgres;Pwd=password"

                  provider-name = "PostgreSQL.15"

                  table-mapping = default

                  # Absolute path to the write journal plugin configuration entry that this
                  # query journal will connect to.
                  # If undefined (or "") it will connect to the default journal as specified by the
                  # akka.persistence.journal.plugin property.
                  write-plugin = ""

                  # The SQL write journal is notifying the query side as soon as things
                  # are persisted, but for efficiency reasons the query side retrieves the events
                  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
                  refresh-interval = 3s

                  # How many events to fetch in one query (replay) and keep buffered until they
                  # are delivered downstreams.
                  max-buffer-size = 500

                  default = ${akka.persistence.journal.sql.default}
                }
              }
            }
          }
      ]]>
    </hocon>
  </akka>
</configuration>
